
'use client';

import { useState, useTransition } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { StudentVisit } from '@/lib/types';
import { generateExcuseSlipAction } from '@/app/(app)/dashboard/actions';
import { useToast } from '@/hooks/use-toast';
import { Loader2, FileText, Bot } from 'lucide-react';
import { format } from 'date-fns';
import { ScrollArea } from '../ui/scroll-area';
import { Markdown } from '../ui/markdown';
import { Alert, AlertDescription, AlertTitle } from '../ui/alert';

export function ReleaseFormButton({ visit }: { visit: StudentVisit }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isPending, startTransition] = useTransition();
  const [excuseSlip, setExcuseSlip] = useState('');
  const { toast } = useToast();

  const handleGenerate = () => {
    startTransition(async () => {
      setExcuseSlip('');
      const result = await generateExcuseSlipAction(visit);
      if (result.success && result.excuseSlip) {
        setExcuseSlip(result.excuseSlip);
        toast({
          title: 'Success',
          description: 'Excuse slip generated by AI.',
        });
      } else {
        toast({
          variant: 'destructive',
          title: 'Error',
          description: result.error || 'Failed to generate excuse slip.',
        });
      }
    });
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(excuseSlip.replace(/\*\*/g, ''));
    toast({ title: 'Copied!', description: 'Excuse slip text copied to clipboard.' });
  }

  return (
    <>
      <Button variant="ghost" size="sm" onClick={() => {
        setExcuseSlip('');
        setIsOpen(true)
      }}>
        <FileText className="mr-2 h-4 w-4" />
        Form
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-h-[90vh] flex flex-col">
          <DialogHeader>
            <DialogTitle>AI Excuse Slip Generator</DialogTitle>
            <DialogDescription>
              Generate a formal excuse slip for the student based on their visit.
            </DialogDescription>
          </DialogHeader>
          <div className="flex-grow py-4 space-y-4">
             <Alert>
                <Bot className="h-4 w-4" />
                <AlertTitle>Visit Details</AlertTitle>
                <AlertDescription className="text-xs">
                    <strong>{visit.studentName}</strong> reported "{visit.symptoms}" on {format(new Date(visit.timestamp), 'PP')}.
                </AlertDescription>
            </Alert>
            
            {isPending && (
                <div className="flex items-center justify-center p-8 space-x-2 text-muted-foreground">
                    <Loader2 className="h-5 w-5 animate-spin" />
                    <span>Generating excuse slip...</span>
                </div>
            )}
            
            {excuseSlip && (
              <ScrollArea className="h-64 w-full rounded-md border p-4">
                <div className="prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap">
                    <Markdown text={excuseSlip} />
                </div>
              </ScrollArea>
            )}
          </div>
          <DialogFooter className="mt-4 shrink-0">
            <DialogClose asChild>
              <Button variant="outline">Close</Button>
            </DialogClose>
            {excuseSlip ? (
                 <Button onClick={handleCopy}>
                    <FileText className="mr-2 h-4 w-4" />
                    Copy Text
                </Button>
            ) : (
                <Button onClick={handleGenerate} disabled={isPending}>
                  {isPending ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Bot className="mr-2 h-4 w-4" />
                  )}
                  Generate Excuse Slip
                </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
