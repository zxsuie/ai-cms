
'use client';

import { useState, useTransition, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { StudentVisit } from '@/lib/types';
import { generateExcuseSlipAction, updateExcuseLetterAction } from '@/app/(app)/dashboard/actions';
import { useToast } from '@/hooks/use-toast';
import { Loader2, FileText, Bot, Edit, Save, FileDown, Copy } from 'lucide-react';
import { format } from 'date-fns';
import { ScrollArea } from '../ui/scroll-area';
import { Markdown } from '../ui/markdown';
import { Alert, AlertDescription, AlertTitle } from '../ui/alert';
import { Textarea } from '../ui/textarea';
import jsPDF from 'jspdf';

export function ReleaseFormButton({ visit }: { visit: StudentVisit }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isPending, startTransition] = useTransition();
  const [excuseSlip, setExcuseSlip] = useState(visit.excuseLetterText || '');
  const [isEditing, setIsEditing] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // When the dialog opens, reset the state based on the visit prop
    if (isOpen) {
      setExcuseSlip(visit.excuseLetterText || '');
      setIsEditing(false);
    }
  }, [isOpen, visit.excuseLetterText]);

  const handleGenerate = () => {
    startTransition(async () => {
      const result = await generateExcuseSlipAction(visit);
      if (result.success && result.excuseSlip) {
        setExcuseSlip(result.excuseSlip);
        setIsEditing(false);
        toast({
          title: 'Success',
          description: 'Excuse slip regenerated by AI.',
        });
      } else {
        toast({
          variant: 'destructive',
          title: 'Error',
          description: result.error || 'Failed to generate excuse slip.',
        });
      }
    });
  };

  const handleSaveChanges = () => {
    startTransition(async () => {
        const result = await updateExcuseLetterAction(visit.id, excuseSlip);
        if (result.success) {
            toast({ title: 'Saved!', description: 'Excuse letter changes have been saved.'});
            setIsEditing(false);
        } else {
            toast({ variant: 'destructive', title: 'Error', description: result.message });
        }
    });
  }

  const handleDownloadPdf = () => {
    const doc = new jsPDF();
    doc.setFont('Poppins', 'bold');
    doc.setFontSize(16);
    doc.text('iClinicMate', 20, 20);
    
    doc.setFont('PT Sans', 'normal');
    doc.setFontSize(12);
    // Remove markdown bolding for the PDF text
    const plainText = excuseSlip.replace(/\*\*/g, '');
    const lines = doc.splitTextToSize(plainText, 170); // 170 is width in mm for A4 paper with margin
    doc.text(lines, 20, 40);

    doc.save(`Excuse_Slip_${visit.studentName.replace(/ /g, '_')}.pdf`);
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(excuseSlip);
    toast({
      title: 'Copied!',
      description: 'Excuse slip text has been copied to your clipboard.',
    });
  };

  return (
    <>
      <Button variant="ghost" size="sm" onClick={() => setIsOpen(true)}>
        <FileText className="mr-2 h-4 w-4" />
        Form
      </Button>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-h-[90vh] flex flex-col">
          <DialogHeader>
            <DialogTitle>AI Excuse Slip</DialogTitle>
            <DialogDescription>
              AI-generated excuse slip for the student's visit. You can edit before downloading.
            </DialogDescription>
          </DialogHeader>
          <div className="flex-grow py-4 space-y-4 overflow-y-auto">
             <Alert>
                <Bot className="h-4 w-4" />
                <AlertTitle>Visit Details</AlertTitle>
                <AlertDescription className="text-xs">
                    <strong>Student:</strong> {visit.studentName} <br />
                    <strong>Symptoms:</strong> "{visit.symptoms}" <br />
                    <strong>Date:</strong> {format(new Date(visit.timestamp), 'PP')}
                </AlertDescription>
            </Alert>
            
            {isPending && !excuseSlip && (
                <div className="flex items-center justify-center p-8 space-x-2 text-muted-foreground">
                    <Loader2 className="h-5 w-5 animate-spin" />
                    <span>Generating excuse slip...</span>
                </div>
            )}
            
            {excuseSlip && (
              <ScrollArea className="h-64 w-full rounded-md border p-4">
                {isEditing ? (
                    <Textarea 
                        value={excuseSlip} 
                        onChange={(e) => setExcuseSlip(e.target.value)}
                        className="h-full w-full min-h-[200px] text-sm whitespace-pre-wrap"
                    />
                ) : (
                    <div className="prose prose-sm dark:prose-invert max-w-none whitespace-pre-wrap">
                        <Markdown text={excuseSlip} />
                    </div>
                )}
              </ScrollArea>
            )}
          </div>
          <DialogFooter className="mt-4 shrink-0 flex flex-wrap gap-2 sm:flex-nowrap sm:justify-between">
            <div className="flex items-center gap-2 justify-start">
               {excuseSlip && !isEditing && (
                 <>
                   <Button variant="outline" size="sm" onClick={handleDownloadPdf}>
                      <FileDown className="mr-2 h-4 w-4" />
                      PDF
                  </Button>
                   <Button variant="outline" size="sm" onClick={handleCopy}>
                      <Copy className="mr-2 h-4 w-4" />
                      Copy
                  </Button>
                 </>
               )}
            </div>
            <div className="flex items-center gap-2 justify-end">
                {excuseSlip ? (
                    isEditing ? (
                        <>
                            <DialogClose asChild>
                                <Button variant="outline">Cancel</Button>
                            </DialogClose>
                            <Button onClick={handleSaveChanges} disabled={isPending}>
                                {isPending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                                Save
                            </Button>
                        </>
                    ) : (
                        <>
                            <Button variant="secondary" onClick={() => setIsEditing(true)}>
                                <Edit className="mr-2 h-4 w-4" />
                                Edit
                            </Button>
                            <Button onClick={handleGenerate} disabled={isPending}>
                                {isPending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Bot className="mr-2 h-4 w-4" />}
                                Regenerate
                            </Button>
                        </>
                    )
                ) : (
                    <>
                        <DialogClose asChild>
                            <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={handleGenerate} disabled={isPending}>
                        {isPending ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <Bot className="mr-2 h-4 w-4" />
                        )}
                        Generate Excuse Slip
                        </Button>
                    </>
                )}
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
